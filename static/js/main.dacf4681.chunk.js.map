{"version":3,"sources":["components/Display.jsx","components/Button.jsx","components/Keypad.jsx","components/Calculator.jsx","App.jsx","index.jsx"],"names":["Display","value","id","className","type","tabIndex","onChange","Button","buttonStyle","label","onClick","name","Keypad","actionToPerform","allClear","functionKeys","handleClickButton","keyType","map","functionKey","numericKey","lastRowKey","operatorKey","Calculator","useState","accValue","setAccValue","screenValue","setScreenValue","currentOperator","setCurrentOperator","expectsOperand","setExpectsOperand","isScreenClear","clearLastDigit","useCallback","length","substring","handleClickFunctionKey","String","parseFloat","includes","handleKeyDown","e","key","preventDefault","useEffect","document","addEventListener","removeEventListener","handleClickNumericKey","operator","inputValue","resultValue","operate","handleClickOperator","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"iNAUeA,EAVC,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAGhB,OACG,qBAAKC,GAAG,UAAUC,UAAU,OAA5B,SACG,uBAAOC,KAAK,OAAOC,SAAS,KAAKJ,MAAOA,EAAOK,SAJhC,kBCWTC,EAZA,SAAC,GAAkD,IAAhDN,EAA+C,EAA/CA,MAAOG,EAAwC,EAAxCA,KAAMI,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,QAK/C,OACI,wBAAQC,KAAMV,EAAOE,UAAWK,EAAaE,QALvB,WACtBA,EAAQT,EAAOG,IAIf,SACKK,KCmDEG,EAxDA,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,gBAAiBC,EAAe,EAAfA,SAWzBC,EAAe,CACjB,CAAEN,MAAOK,EAAW,KAAO,IAAKb,MAAOa,EAAW,KAAO,KACzD,CAAEL,MAAO,OAAKR,MAAO,OACrB,CAAEQ,MAAO,IAAKR,MAAO,MAQnBe,EAAoB,SAACf,EAAOgB,GAC9BJ,EAAgBZ,EAAOgB,IAG3B,OACI,sBAAKf,GAAG,SAASC,UAAU,wBAA3B,UACI,sBAAKA,UAAU,OAAf,UACKY,EAAaG,KACV,SAAAC,GAAW,OACP,cAAC,EAAD,CAAgCV,MAAOU,EAAYV,MAAOR,MAAOkB,EAAYlB,MACzEO,YAAY,SAASE,QAASM,EAAmBZ,KAAK,MAD7Ce,EAAYV,UA9BzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAiCpBS,KACT,SAAAE,GAAU,OACN,cAAC,EAAD,CAAyBX,MAAOW,EAAYnB,MAAOmB,EAC/CZ,YAAY,cAAcE,QAASM,EAAmBZ,KAAK,WADlDgB,MAnBb,CAChB,CAAEX,MAAO,IAAKR,MAAO,IAAKG,KAAM,UAAWI,YAAa,uBACxD,CAAEC,MAAO,OAAKR,MAAO,IAAKG,KAAM,KAAMI,YAAa,gBAoB9BU,KACT,SAAAG,GAAU,OACN,cAAC,EAAD,CAA+BZ,MAAOY,EAAWZ,MAAOR,MAAOoB,EAAWpB,MACtEO,YAAaa,EAAWb,YAAaE,QAASM,EAAmBZ,KAAMiB,EAAWjB,MADzEiB,EAAWZ,aAIpC,qBAAKN,UAAU,wBAAf,SA1Ca,CACjB,CAAEM,MAAO,OAAKR,MAAO,KACrB,CAAEQ,MAAO,OAAKR,MAAO,KACrB,CAAEQ,MAAO,IAAKR,MAAO,KACrB,CAAEQ,MAAO,IAAKR,MAAO,KACrB,CAAEQ,MAAO,IAAKR,MAAO,MAsCCiB,KACV,SAAAI,GAAW,OACP,cAAC,EAAD,CAAgCb,MAAOa,EAAYb,MAAOR,MAAOqB,EAAYrB,MACzEO,YAAY,SAASE,QAASM,EAAmBZ,KAAK,YAD7CkB,EAAYb,gBCuGlCc,EArJI,WACf,MAAgCC,mBAAS,MAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAsCF,mBAAS,KAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAA8CJ,mBAAS,MAAvD,mBAAOK,EAAP,KAAwBC,EAAxB,KACA,EAA4CN,oBAAS,GAArD,mBAAOO,EAAP,KAAuBC,EAAvB,KAaMC,EAAgC,MAAhBN,EAuBhBO,EAAiBC,uBAAY,WACX,MAAhBR,IACIA,EAAYS,OAAS,EACrBR,EAAe,KAGfA,EAAeD,EAAYU,UAAU,EAAGV,EAAYS,OAAS,OAGtE,CAACT,IAoBEW,EAAyB,SAACrC,GACd,OAAVA,GA/DJyB,EAAY,MACZE,EAAe,KACfE,EAAmB,MACnBE,GAAkB,IA+DC,MAAV/B,EA3DT2B,EAAe,KA8DI,QAAV3B,EAxDT2B,EAAeW,QAAQC,WAAWb,KA2Df,MAAV1B,EAvDT2B,EAAeW,OAAOC,WAAWb,GAAe,MA0D7B,MAAV1B,IAtDL8B,EACAH,EAAe,MAGVD,EAAYc,SAAS,MACtBb,EAAeD,EAAc,KAIrCK,GAAkB,KA0FhBU,EAAgBP,uBAAY,SAACQ,GACjB,cAAVA,EAAEC,MACFD,EAAEE,iBACFX,OAEL,CAACA,IAOJ,OALAY,qBAAU,WAEN,OADAC,SAASC,iBAAiB,UAAWN,GAC9B,kBAAMK,SAASE,oBAAoB,UAAWP,MACtD,CAACA,EAAef,IAGf,qBAAKzB,GAAG,kBAAkBC,UAAW,kCAArC,SACI,sBAAKD,GAAG,WAAWC,UAAW,sCAA9B,UACI,cAAC,EAAD,CAASF,MAAO0B,IAChB,cAAC,EAAD,CAAQd,gBA5BU,SAACZ,EAAOgB,GAClB,OAAZA,EACAqB,EAAuBrC,GAEN,YAAZgB,EAhCiB,SAAChB,GACvB8B,GACAH,EAAeW,OAAOtC,IACtB+B,GAAkB,IAGlBJ,EAA+B,MAAhBD,EAAsBY,OAAOtC,GAAS0B,EAAc1B,GA2BnEiD,CAAsBjD,GAEL,aAAZgB,GAzBe,SAACkC,GACzB,IAAMC,EAAaZ,WAAWb,GAE9B,GAAiB,OAAbF,EACAC,EAAY0B,QAGZ,GAAIvB,EAAiB,CACjB,IAAMwB,EAtDF,SAACF,EAAU1B,EAAU2B,GACjC,MAAiB,MAAbD,EACO1B,EAAW2B,EAEA,MAAbD,EACE1B,EAAW2B,EAEA,MAAbD,EACE1B,EAAW2B,EAEA,MAAbD,EACE1B,EAAW2B,EAEA,MAAbD,EACEC,OADN,EAyCuBE,CAAQzB,EAAiBJ,EAAU2B,GACvD1B,EAAY2B,GACZzB,EAAeW,OAAOc,IAI9BrB,GAAkB,GAClBF,EAAmBqB,GAWfI,CAAoBtD,IAoBgCa,SAAUmB,UC5I3DuB,G,MAJH,kBACV,cAAC,EAAD,MCAFC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFZ,SAASa,eAAe,W","file":"static/js/main.dacf4681.chunk.js","sourcesContent":["const Display = ({ value }) => {\n   const handleChange = () => { };\n\n   return (\n      <div id=\"display\" className=\"flex\">\n         <input type=\"text\" tabIndex=\"-1\" value={value} onChange={handleChange} />\n      </div>\n   );\n};\n\nexport default Display;\n","const Button = ({ value, type, buttonStyle, label, onClick }) => {\n    const handleButtonClick = () => {\n        onClick(value, type);\n    }\n\n    return (\n        <button name={value} className={buttonStyle} onClick={handleButtonClick}>\n            {label}\n        </button>\n    );\n};\n\nexport default Button;\n","import Button from './Button';\n\nconst Keypad = ({ actionToPerform, allClear }) => {\n    const numericKeys = [7, 8, 9, 4, 5, 6, 1, 2, 3];\n\n    const operatorKeys = [\n        { label: '÷', value: '/' },\n        { label: '×', value: 'x' },\n        { label: '-', value: '-' },\n        { label: '+', value: '+' },\n        { label: '=', value: '=' }\n    ];\n\n    const functionKeys = [\n        { label: allClear ? 'AC' : 'C', value: allClear ? 'AC' : 'C' },\n        { label: '±', value: '+/-' },\n        { label: '%', value: '%' }\n    ];\n\n    const lastRowKeys = [\n        { label: '0', value: '0', type: 'numeric', buttonStyle: 'numeric-key special' },\n        { label: '·', value: '.', type: 'fx', buttonStyle: 'numeric-key' }\n    ];\n\n    const handleClickButton = (value, keyType) => {\n        actionToPerform(value, keyType);\n    }\n\n    return (\n        <div id=\"keypad\" className=\"flex row jc-sp-around\">\n            <div className=\"grid\">\n                {functionKeys.map(\n                    functionKey =>\n                        <Button key={functionKey.label} label={functionKey.label} value={functionKey.value}\n                            buttonStyle=\"fx-key\" onClick={handleClickButton} type=\"fx\" />\n                )}\n                {numericKeys.map(\n                    numericKey =>\n                        <Button key={numericKey} label={numericKey} value={numericKey}\n                            buttonStyle=\"numeric-key\" onClick={handleClickButton} type=\"numeric\" />\n                )}\n                {lastRowKeys.map(\n                    lastRowKey =>\n                        <Button key={lastRowKey.label} label={lastRowKey.label} value={lastRowKey.value}\n                            buttonStyle={lastRowKey.buttonStyle} onClick={handleClickButton} type={lastRowKey.type} />\n                )}\n            </div>\n            <div className=\"flex column jc-sp-btw\">\n                {operatorKeys.map(\n                    operatorKey =>\n                        <Button key={operatorKey.label} label={operatorKey.label} value={operatorKey.value}\n                            buttonStyle=\"op-key\" onClick={handleClickButton} type=\"operator\" />\n                )}\n            </div>\n        </div>\n    )\n}\n\nexport default Keypad;\n","import { useEffect, useState, useCallback } from 'react';\nimport Display from './Display';\nimport Keypad from './Keypad';\n\nconst Calculator = () => {\n    const [accValue, setAccValue] = useState(null);\n    const [screenValue, setScreenValue] = useState('0');\n    const [currentOperator, setCurrentOperator] = useState(null);\n    const [expectsOperand, setExpectsOperand] = useState(false);\n\n    const allClear = () => {\n        setAccValue(null);\n        setScreenValue('0');\n        setCurrentOperator(null);\n        setExpectsOperand(false);\n    }\n\n    const clearScreen = () => {\n        setScreenValue('0');\n    }\n\n    const isScreenClear = screenValue === '0';\n\n    const reverseSign = () => {\n        setScreenValue(String(-parseFloat(screenValue)));\n    }\n\n    const percentage = () => {\n        setScreenValue(String(parseFloat(screenValue) / 100));\n    };\n\n    const addDecimalPoint = () => {\n        if (expectsOperand) {\n            setScreenValue('0.');\n        }\n        else {\n            if (!screenValue.includes('.')) {\n                setScreenValue(screenValue + '.');\n            }\n        }\n\n        setExpectsOperand(false);\n    }\n\n    const clearLastDigit = useCallback(() => {\n        if (screenValue !== '0') {\n            if (screenValue.length > 1) {\n                setScreenValue('0');\n            }\n            else {\n                setScreenValue(screenValue.substring(0, screenValue.length - 1));\n            }\n        }\n    }, [screenValue]);\n\n    const operate = (operator, accValue, inputValue) => {\n        if (operator === '+') {\n            return accValue + inputValue;\n        }\n        else if (operator === '-') {\n            return accValue - inputValue;\n        }\n        else if (operator === 'x') {\n            return accValue * inputValue;\n        }\n        else if (operator === '/') {\n            return accValue / inputValue;\n        }\n        else if (operator === '=') {\n            return inputValue;\n        }\n    }\n\n    const handleClickFunctionKey = (value) => {\n        if (value === 'AC') {\n            allClear();\n        }\n        else if (value === 'C') {\n            clearScreen();\n        }\n        else if (value === '+/-') {\n            reverseSign();\n        }\n        else if (value === '%') {\n            percentage();\n        }\n        else if (value === '.') {\n            addDecimalPoint();\n        }\n    }\n\n    const handleClickNumericKey = (value) => {\n        if (expectsOperand) {\n            setScreenValue(String(value));\n            setExpectsOperand(false);\n        }\n        else {\n            setScreenValue(screenValue === '0' ? String(value) : screenValue + value);\n        }\n    }\n\n    const handleClickOperator = (operator) => {\n        const inputValue = parseFloat(screenValue);\n\n        if (accValue === null) {\n            setAccValue(inputValue);\n        }\n        else {\n            if (currentOperator) {\n                const resultValue = operate(currentOperator, accValue, inputValue);\n                setAccValue(resultValue);\n                setScreenValue(String(resultValue));\n            }\n        }\n\n        setExpectsOperand(true);\n        setCurrentOperator(operator);\n    }\n\n    const handleActionToPerform = (value, keyType) => {\n        if (keyType === 'fx') {\n            handleClickFunctionKey(value);\n        }\n        else if (keyType === 'numeric') {\n            handleClickNumericKey(value);\n        }\n        else if (keyType === 'operator') {\n            handleClickOperator(value);\n        }\n    }\n\n    const handleKeyDown = useCallback((e) => {\n        if (e.key === 'Backspace') {\n            e.preventDefault();\n            clearLastDigit();\n        }\n    }, [clearLastDigit]);\n\n    useEffect(() => {\n        document.addEventListener('keydown', handleKeyDown);\n        return () => document.removeEventListener('keydown', handleKeyDown);\n    }, [handleKeyDown, screenValue]);\n\n    return (\n        <div id=\"calculator-view\" className={\"flex column jc-center ai-center\"}>\n            <div id=\"viewport\" className={\"flex column jc-sp-between ai-center\"}>\n                <Display value={screenValue} />\n                <Keypad actionToPerform={handleActionToPerform} allClear={isScreenClear} />\n            </div>\n        </div >\n    )\n}\n\nexport default Calculator;\n","import Calculator from './components/Calculator';\nimport './App.scss';\n\nconst App = () => (\n  <Calculator />\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}